{"mappings":"oeAKA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,WAAYF,SAASC,cAAc,gBACnCE,UAAWH,SAASC,cAAc,eAClCG,YAAaJ,SAASC,cAAc,kBAwCtC,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAgB,C,SAAEL,E,MAAUC,GAElC,OAAO,IAAIK,SAAQ,CAACC,EAASC,KACvBN,GACFK,EAAQF,GAEVG,EAAOH,MA7CXb,EAAKC,OAAOgB,iBAAiB,UAE7B,SAAsBC,GACpBA,EAAIC,iBACJC,QAAQC,IAAI,MAAOH,GAUnB,IAAII,EAAQC,OAAOvB,EAAKI,WAAWoB,OACnC,MAAMC,EAAOF,OAAOvB,EAAKK,UAAUmB,OAC7BE,EAASH,OAAOvB,EAAKM,YAAYkB,OAEvCJ,QAAQC,IAAI,QAASC,GACrBF,QAAQC,IAAI,OAAQI,GACpBL,QAAQC,IAAI,SAAUK,GAEtB,IAAK,IAAIC,EAAW,EAAGA,GAAYD,EAAQC,GAAU,EACnDL,GAASG,EACTlB,EAAcoB,EAAUL,GACrBM,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,KACnBoB,YAAW,KACT/B,EAAAgC,OAAOC,QAAQ,uBAAqBvB,QAAiBC,SACtDA,KACAuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,KACpBoB,YAAW,KACT/B,EAAAgC,OAAOG,QAAQ,sBAAoBzB,QAAeC,MAAW,CACzDyB,SAAS,MACZzB","sources":["src/js/03-promises.js"],"sourcesContent":["// Напиши скрипт, который при сабмите формы вызывает функцию \n// createPromise(position, delay) столько раз, сколько ввели в поле amount.\n// При каждом вызове передай ей номер создаваемого промиса(position)\n// и задержку учитывая введенную пользователем первую задержку(delay) и шаг(step).\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst refs = {\n  formEl: document.querySelector('.form'),\n  inputDelay: document.querySelector('[name=delay]'),\n  inputStep: document.querySelector('[name=step]'),\n  inputAmount: document.querySelector('[name=amount]'),\n}\n\nrefs.formEl.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  console.log('EVT', evt);\n  // console.log('EVT Target', evt.target);\n  // console.log('evt.currentTarget', evt.currentTarget);\n  // console.log('refs.inputStep.value', refs.inputStep.value);\n  // console.log('refs.inputDelay.value', refs.inputDelay.value);\n\n  // let delay = Number(evt.currentTarget.delay.value);\n  // const step = Number(evt.currentTarget.step.value);\n  // const amount = Number(evt.currentTarget.amount.value);\n\n  let delay = Number(refs.inputDelay.value);\n  const step = Number(refs.inputStep.value);\n  const amount = Number(refs.inputAmount.value);\n  \n  console.log('delay', delay)\n  console.log('step', step)\n  console.log('amount', amount)\n\n  for (let position = 1; position <= amount; position+=1) {\n    delay += step;\n    createPromise(position, delay)\n      .then(({ position, delay }) =>\n      setTimeout(() => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    }, delay))\n      .catch(({ position, delay }) =>\n      setTimeout(() => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`,\n          { useIcon: false });\n      }, delay));\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const objectPromise = { position, delay };\n\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve(objectPromise);\n    }\n    reject(objectPromise);\n  });  \n}"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","formEl","document","querySelector","inputDelay","inputStep","inputAmount","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","objectPromise","Promise","resolve","reject","addEventListener","evt","preventDefault","console","log","delay1","Number","value","step","amount","position1","then","setTimeout","Notify","success","catch","failure","useIcon"],"version":3,"file":"03-promises.eb5d3717.js.map"}